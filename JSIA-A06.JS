// --- 1. SETUP INICIAL ---
// Array que ir√° armazenar nossa lista de tarefas.
let tarefas = ['Estudar Fun√ß√µes em JS', 'Fazer compras', 'Pagar contas'];


// --- 2. FUN√á√ÉO AN√îNIMA PARA ADICIONAR TAREFAS ---
// Atribu√≠mos uma fun√ß√£o sem nome a uma vari√°vel.
// Esta √© uma Fun√ß√£o An√¥nima.
const adicionarTarefa = function(tarefa) {
  if (tarefa && tarefa.trim() !== '') { // Garante que a tarefa n√£o est√° vazia
    tarefas.push(tarefa.trim());
    console.log(`‚úÖ Tarefa "${tarefa.trim()}" foi adicionada!`);
  } else {
    console.warn("‚ö†Ô∏è A tarefa n√£o pode ser vazia.");
  }
};

// --- 3. ARROW FUNCTION PARA LISTAR TAREFAS ---
// Usamos a sintaxe mais curta e moderna de uma Arrow Function.
const listarTarefas = () => {
  console.log("\n--- LISTA DE TAREFAS ATUAL ---");
  if (tarefas.length === 0) {
    console.log("Voc√™ n√£o tem tarefas pendentes.");
  } else {
    tarefas.forEach((tarefa, indice) => {
      console.log(`${indice}: ${tarefa}`);
    });
  }
  console.log("--------------------------------\n");
};

// --- 4. FUN√á√ÉO DE CALLBACK E FUN√á√ÉO PRINCIPAL ---

// Esta √© uma fun√ß√£o de ordem superior (Higher-Order Function) porque
// recebe outra fun√ß√£o (o callback) como um de seus argumentos.
const gerenciarTarefas = (indice, callback) => {
  // Valida√ß√£o para garantir que o √≠ndice fornecido √© v√°lido.
  if (isNaN(indice) || indice < 0 || indice >= tarefas.length) {
    console.error("‚ùå Erro: √çndice inv√°lido ou tarefa n√£o encontrada.");
    return;
  }
  // Se o √≠ndice for v√°lido, a fun√ß√£o de callback recebida √© executada.
  callback(indice);
  // Ap√≥s a opera√ß√£o, lista as tarefas novamente para mostrar o resultado.
  listarTarefas();
};

// Abaixo est√£o as nossas Fun√ß√µes de Callback.
// Cada uma delas realiza uma opera√ß√£o espec√≠fica.

const removerTarefa = (indice) => {
  const tarefaRemovida = tarefas.splice(indice, 1);
  console.log(`üóëÔ∏è Tarefa "${tarefaRemovida[0]}" foi removida.`);
};

const concluirTarefa = (indice) => {
  if (tarefas[indice].startsWith('‚úîÔ∏è')) {
    console.log("Esta tarefa j√° est√° marcada como conclu√≠da.");
  } else {
    tarefas[indice] = '‚úîÔ∏è ' + tarefas[indice];
    console.log(`üëç Tarefa "${tarefas[indice]}" marcada como conclu√≠da!`);
  }
};

const atualizarTarefa = (indice) => {
  const novaDescricao = prompt(`Digite a nova descri√ß√£o para a tarefa: "${tarefas[indice]}"`);
  if (novaDescricao && novaDescricao.trim() !== '') {
    tarefas[indice] = novaDescricao.trim();
    console.log(`‚úèÔ∏è Tarefa atualizada com sucesso!`);
  } else {
    console.warn("‚ö†Ô∏è A atualiza√ß√£o foi cancelada ou a descri√ß√£o estava vazia.");
  }
};

// --- 5. INTERA√á√ÉO COM O USU√ÅRIO (DEMONSTRA√á√ÉO) ---

// Mostra a lista inicial de tarefas.
alert("Bem-vindo ao Gerenciador de Tarefas! Os resultados ser√£o exibidos no console.");
listarTarefas();

// 1. Adicionar uma nova tarefa (usando a fun√ß√£o an√¥nima).
let nova = prompt("Digite uma nova tarefa para adicionar:");
adicionarTarefa(nova);
listarTarefas();

// 2. Concluir uma tarefa (usando a fun√ß√£o de callback).
let indiceParaConcluir = parseInt(prompt("Digite o √çNDICE da tarefa que deseja CONCLUIR:"));
gerenciarTarefas(indiceParaConcluir, concluirTarefa); // 'concluirTarefa' √© o callback

// 3. Remover uma tarefa (usando outra fun√ß√£o de callback).
let indiceParaRemover = parseInt(prompt("Digite o √çNDICE da tarefa que deseja REMOVER:"));
gerenciarTarefas(indiceParaRemover, removerTarefa); // 'removerTarefa' √© o callback

// 4. Atualizar uma tarefa (demonstrando o √∫ltimo callback).
let indiceParaAtualizar = parseInt(prompt("Digite o √çNDICE da tarefa que deseja ATUALIZAR:"));
gerenciarTarefas(indiceParaAtualizar, atualizarTarefa); // 'atualizarTarefa' √© o callback